import pandas as pd
import datamol as dm
from mordred import Calculator, descriptors
from tqdm import tqdm
import concurrent.futures

# Fonction pour générer les conformères et calculer les descriptors
def process_smiles(smiles, name, activity, num_conformers=8):
    mol = dm.to_mol(smiles)
    if mol is None:
        return None
    
    # Génération des conformères
    conformers = dm.conformers.generate(mol, n_confs=num_conformers)
    
    # Calcul des descripteurs pour chaque conformère
    calc = Calculator(descriptors, ignore_3D=False)
    
    # Exclure ABCIndex des descripteurs
    calc.descriptors = [d for d in calc.descriptors if d.__class__.__name__ != 'ABCIndex']
    
    all_descs = []
    
    for i in range(conformers.GetNumConformers()):
        conf = conformers.GetConformer(i)
        descs = calc(conf.GetOwningMol())
        desc_dict = {str(d): float(v) if pd.notna(v) else None for d, v in descs.items()}
        desc_dict['Molecule Name'] = name
        desc_dict['Activity'] = activity
        desc_dict['Conformer ID'] = i
        all_descs.append(desc_dict)
    
    return all_descs

# Fonction principale
def process_csv_to_csv(input_file, output_file):
    df = pd.read_csv(input_file)
    
    all_descriptors = []
    
    # Utiliser ProcessPoolExecutor pour la parallélisation
    with concurrent.futures.ProcessPoolExecutor() as executor:
        # Soumettre les tâches
        futures = [executor.submit(process_smiles, row['Smiles'], row['Molecule Name'], row['Activity']) 
                   for _, row in df.iterrows()]
        
        # Traiter les résultats au fur et à mesure qu'ils sont terminés
        for future in tqdm(concurrent.futures.as_completed(futures), total=len(df), desc="Processing molecules"):
            result = future.result()
            if result:
                all_descriptors.extend(result)
    
    # Création du DataFrame final
    final_df = pd.DataFrame(all_descriptors)
    
    # Réorganisation des colonnes
    cols = ['Molecule Name', 'Activity', 'Conformer ID'] + [col for col in final_df.columns if col not in ['Molecule Name', 'Activity', 'Conformer ID']]
    final_df = final_df[cols]
    
    # Enregistrement des résultats
    final_df.to_csv(output_file, index=False)
    print(f"Descriptors saved to {output_file}")

if __name__ == '__main__':
    input_file = '/Users/johannatter/Documents/Thèse science/Prion/DeepLearning/Prion_DB_clean.csv'
    output_file = 'descriptors_prion.csv'
    process_csv_to_csv(input_file, output_file)

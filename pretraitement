import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem
from mordred import Calculator, descriptors
from tqdm import tqdm
import concurrent.futures
import os

# Augmenter la limite de fichiers ouverts
os.system('ulimit -n 4096')

# Fonction pour générer les conformères et calculer les descripteurs
def process_smiles(row):
    smiles, activity, name = row['Smiles'], row['Activity'], row['Molecule Name']
    mol = Chem.MolFromSmiles(smiles)
    if mol is None:
        return None
    
    mol = Chem.AddHs(mol)
    AllChem.EmbedMultipleConfs(mol, numConfs=8, randomSeed=42)
    
    # Optimisation des conformères
    AllChem.UFFOptimizeMoleculeConfs(mol, maxIters=200)
    
    # Calcul des descripteurs
    calc = Calculator(descriptors, ignore_3D=False)
    descs = calc.pandas([mol])
    
    # Ajout de l'activité et du nom de la molécule
    for conf_id in range(mol.GetNumConformers()):
        mol.GetConformer(conf_id).SetProp('Activity', activity)
        mol.GetConformer(conf_id).SetProp('Molecule Name', name)
    
    return mol, descs

# Fonction pour traiter un fichier CSV et générer un fichier SDF
def process_csv_to_sdf(input_csv, output_sdf):
    df = pd.read_csv(input_csv)
    
    # Vérification des colonnes nécessaires
    if not all(col in df.columns for col in ['Smiles', 'Activity', 'Molecule Name']):
        raise ValueError("Le fichier CSV doit contenir les colonnes 'Smiles', 'Activity' et 'Molecule Name'.")
    
    total_molecules = len(df)
    
    with Chem.SDWriter(output_sdf) as writer, \
         concurrent.futures.ProcessPoolExecutor() as executor:
        
        futures = [executor.submit(process_smiles, row) for _, row in df.iterrows()]
        
        for future in tqdm(concurrent.futures.as_completed(futures), total=total_molecules, desc="Processing molecules"):
            try:
                result = future.result()
                if result is not None:
                    mol, descs = result
                    for conf_id in range(mol.GetNumConformers()):
                        mol_conf = Chem.Mol(mol, confId=conf_id)
                        for desc_name, desc_value in descs.iloc[0].items():
                            if pd.notna(desc_value):
                                mol_conf.SetProp(desc_name, str(desc_value))
                        writer.write(mol_conf)
            except Exception as e:
                print(f"Error processing molecule: {str(e)}")

if __name__ == '__main__':
    # Traitement du fichier Prion_DB.csv
    input_file = '/Users/johannatter/Documents/Thèse science/Prion/DeepLearning/Prion_DB.csv'
    output_file = 'Prion_DB_mordred.sdf'
    
    process_csv_to_sdf(input_file, output_file)
    print("Traitement terminé. Le fichier SDF a été généré avec succès.")

import os
import tensorflow as tf

# Configuration de TensorFlow
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
tf.config.threading.set_inter_op_parallelism_threads(0)
tf.config.threading.set_intra_op_parallelism_threads(0)

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from rdkit import Chem, RDLogger
from rdkit.Chem import AllChem, Descriptors3D
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Suppression des avertissements RDKit
RDLogger.DisableLog('rdApp.*')

# Fonction pour générer les descripteurs 3D
def generate_3d_descriptors(smiles):
    mol = Chem.MolFromSmiles(smiles)
    if mol is not None:
        mol = Chem.AddHs(mol)
        AllChem.EmbedMolecule(mol, randomSeed=42)
        AllChem.MMFFOptimizeMolecule(mol)
        
        descriptors = [
            Descriptors3D.Asphericity(mol),
            Descriptors3D.Eccentricity(mol),
            Descriptors3D.InertialShapeFactor(mol),
            Descriptors3D.NPR1(mol),
            Descriptors3D.NPR2(mol),
            Descriptors3D.PMI1(mol),
            Descriptors3D.PMI2(mol),
            Descriptors3D.PMI3(mol),
            Descriptors3D.RadiusOfGyration(mol),
            Descriptors3D.SpherocityIndex(mol),
        ]
        return descriptors
    return None

# Chargement et préparation des données
print("Loading data...")
train_data = pd.read_csv('/Users/johannatter/Documents/Thèse science/Prion/DeepLearning/Train_set.csv')
test_data = pd.read_csv('/Users/johannatter/Documents/Thèse science/Prion/DeepLearning/Test_set.csv')

# Génération des descripteurs 3D
print("Generating 3D descriptors for training set...")
train_descriptors = np.array([generate_3d_descriptors(s) for s in tqdm(train_data['Smiles'])])
print("Generating 3D descriptors for test set...")
test_descriptors = np.array([generate_3d_descriptors(s) for s in tqdm(test_data['Smiles'])])

# Préparation des données cibles
le = LabelEncoder()
y_train = le.fit_transform(train_data['Activity'])
y_test = le.transform(test_data['Activity'])

# Normalisation des descripteurs
scaler = StandardScaler()
X_train = scaler.fit_transform(train_descriptors)
X_test = scaler.transform(test_descriptors)

# Séparation des données d'entraînement en ensemble d'entraînement et de validation
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Input

# Création du modèle
model = Sequential([
    Input(shape=(10,)),  # Ajoutez cette ligne
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dropout(0.3),
    Dense(16, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])

# Compilation du modèle
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Entraînement du modèle
print("Training model...")
early_stopping = EarlyStopping(patience=10, restore_best_weights=True)
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_data=(X_val, y_val),
    callbacks=[early_stopping],
    verbose=1
)

# Évaluation du modèle
print("\nEvaluating model on test set...")
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Accuracy: {test_accuracy:.4f}")

# Prédictions sur l'ensemble de test
print("Making predictions on test set...")
y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype(int).flatten()

# Calcul des métriques
accuracy = accuracy_score(y_test, y_pred_classes)
precision = precision_score(y_test, y_pred_classes)
recall = recall_score(y_test, y_pred_classes)
f1 = f1_score(y_test, y_pred_classes)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

# Sauvegarde du modèle
model.save('qsar_3d_model.keras')
print("Model saved as 'qsar_3d_model.keras'")
